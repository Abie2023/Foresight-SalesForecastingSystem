version: '3.8'

services:
    # sales forecasst service
    forecast_service:
        platform: linux/arm64
        image: ariya23156/sale-forecast-service:latest
        container_name: forecast_service
        build:
            context: ./services/forecast_service
            dockerfile: Dockerfile
            args:
                FORECAST_SERVICE_PORT: ${FORECAST_SERVICE_PORT}
        env_file:
            - .env
        environment:
            - MLFLOW_TRACKING_URI=http://mlflow:${MLFLOW_PORT}
        networks:
            - forecast_network
        ports:
            - ${FORECAST_SERVICE_PORT}:${FORECAST_SERVICE_PORT}
        volumes:
            - mlflow_data:${MLFLOW_ARTIFACT_ROOT}:ro

    # Temp web UI interface to test some native JS/HTML
    # temp_ui:
    #     platform: linux/arm64
    #     container_name: temp_ui
    #     build:
    #         context: ./services/temp_ui
    #         dockerfile: Dockerfile
    #         args:
    #             TEMP_UI_PORT: 6969
    #     env_file:
    #         - .env
    #     environment:
    #         - TEMP_UI_PORT=6969
    #     networks:
    #         - forecast_network
    #     ports:
    #         - 6969:6969
    #     volumes:
    #         - /Users/ariyasontrapornpol/Desktop/personal_projects/dev_workspace/dev_repos/sales-forecast-mlops-at-scale/services/temp_ui/app/:/service/app/

    # Web UI interface
    web_ui:
        platform: linux/arm64
        container_name: web_ui
        build:
            context: ./services/web_ui
            dockerfile: Dockerfile
            args:
                WEB_UI_PORT: ${WEB_UI_PORT}
        env_file:
            - .env
        environment:
            - FORECAST_ENDPOINT_URI=http://nginx/api/forecasters/forecast
        networks:
            - forecast_network
        ports:
            - ${WEB_UI_PORT}:${WEB_UI_PORT}
        volumes:
            - /Users/ariyasontrapornpol/Desktop/personal_projects/dev_workspace/dev_repos/sales-forecast-mlops-at-scale/services/web_ui/app/main.py:/service/app/main.py

    # service for triggering training/retraining
    training_service:
        platform: linux/arm64
        container_name: training_service
        build:
            context: ./services/training_service
            dockerfile: Dockerfile
            args:
                FORECAST_SERVICE_PORT: ${TRAINING_SERVICE_PORT}
                MLFLOW_ARTIFACT_ROOT: ${MLFLOW_ARTIFACT_ROOT}
        env_file:
            - .env
        environment:
            - MLFLOW_TRACKING_URI=http://mlflow:${MLFLOW_PORT}
        networks:
            - forecast_network
        ports:
            - ${TRAINING_SERVICE_PORT}:${TRAINING_SERVICE_PORT}
        volumes:
            - mlflow_data:${MLFLOW_ARTIFACT_ROOT}

    nginx:
        platform: linux/arm64
        container_name: nginx
        # restart: always
        build:
            context: ./services/nginx
            dockerfile: Dockerfile
        env_file:
            - .env
        networks:
            - forecast_network
        ports:
            - ${NGINX_PORT}:${NGINX_PORT}
        depends_on:
            - forecast_service
            - web_ui
            - training_service

    # ML platform / experiment tracking
    mlflow:
        platform: linux/arm64
        container_name: mlflow_server
        # restart: always
        build:
            context: ./services/mlflow
            dockerfile: Dockerfile
            args:
                MLFLOW_PORT: ${MLFLOW_PORT}
        env_file:
            - .env
        environment:
            - BACKEND_STORE_URI=postgresql://mlflow_user:SuperSecurePwdHere@postgres:${POSTGRES_PORT}/mlflow_pg_db
        networks:
            - forecast_network
        ports:
            - "${MLFLOW_PORT}:${MLFLOW_PORT}"
        volumes:
            - mlflow_data:${MLFLOW_ARTIFACT_ROOT}
        depends_on:
            postgres:
                condition: service_healthy

    # sql database
    postgres:
        platform: linux/arm64
        container_name: postgres_server
        image: postgres:15.3
        # restart: always
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=postgres
        networks:
            - forecast_network
        volumes:
            - ./services/postgres/docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
            - pgdata:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5

networks:
    forecast_network:
        driver: "bridge"

volumes:
    mlflow_data:
    pgdata: